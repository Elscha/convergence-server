convergence {

  domain-shutdown-delay = 10 minutes
  shard-count = 100

  persistence {
    server {
      admin-username = "root"
      admin-password = "password"
    }
    
    convergence-database {
      database = "convergence"

      username = writer
      password = writer

      admin-username = admin
      admin-password = admin

      auto-install = {
        enabled = true
        pre-release = false
      }

      retry-delay = 15s

      initialization-timeout = 10m
    }

    domain-databases {
      randomize-credentials = false
      pre-release = false
    }
  }

  bootstrap {
    default-configs {
      namespaces.enabled = true
      namespaces.user-namespaces-enabled = true
      namespaces.default-namespace = convergence
    }

    namespaces = [{
      id = convergence
      displayName = "Convergence"
    }]

    domains = [{
      namespace: "convergence"
      id: "default"
      displayName: "Default"
      favorite: true
      config {
        anonymousAuthEnabled: false
      }
    }]
  }

  default-server-admin {
    username = admin
    password = password
    email = "admin@example.com"
    firstName = Server
    lastName = Admin
    displayName = Server Admin
  }

  realtime = {
    host = "0.0.0.0"
    port = 8080

    websocket {
      max-frames = 1024
      max-stream-duration = 10s
    }

    protocol = {
      handshake-timeout = 10s
      default-request-timeout = 10s
      heartbeat = {
        enabled = true
        ping-interval = 10s
        pong-timeout = 10s
      }
    }

    model {
      passivation-timeout = 10s
      client-data-timeout = 10s
      resynchronization-timeout = 30s
    }

    domain {
      passivation-timeout = 10s
    }
  }

  rest {
    host = "0.0.0.0"
    port = 8081
    rest-domain-shutdown-delay = 10 minutes
    max-rest-actor-shutdown = 30 seconds
  }

  offline {
    model-sync-interval = 5 minutes
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "cluster"

    debug {
      unhandled = on
    }

    serialization-bindings {
      "com.convergencelabs.convergence.server.actor.CborSerializable" = jackson-cbor
      "com.google.protobuf.Message" = proto
    }
    
    warn-about-java-serializer-usage = true
    allow-java-serialization = true
  }

  remote {
    maximum-payload-bytes = 2 megabytes
    log-remote-lifecycle-events = off

    artery {
      transport = tcp
      canonical.hostname = "127.0.0.1"
      canonical.port = 0

      advanced {
        maximum-frame-size = 2 megabytes
      }
    }
  }

  cluster {
    sharding.state-store-mode = ddata
    sharding.distributed-data.durable.keys = []
    
    seed-nodes = []
    roles = []
    auto-down-unreachable-after = 120s

    sharding {
      passivate-idle-entity-after = "off"
    }
  }

  http {
    server {
      idle-timeout = 60 minutes
      remote-address-header = on
    }
  }
}